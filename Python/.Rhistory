S_t = S0*exp(vol*rnorm(0,t) + (r - vol^2/2)*t)
if ((i % 100) == 0) {
print(S_t)
}
value = value + max(S_t - K, 0)
}
return(value*exp(-r*t)/1000)
}
priceSimulation <- function(S0, K, t, vol, r) {
value = 0
for (i in 1:1000) {
S_t = S0*exp(vol*rnorm(0,t) + (r - vol^2/2)*t)
# if ((i % 100) == 0) {
#   print(S_t)
# }
value = value + max(S_t - K, 0)
}
return(value*exp(-r*t)/1000)
}
priceSimulation <- function(S0, K, t, vol, r) {
value = 0
for (i in 1:1000) {
S_t = S0*exp(vol*rnorm(0,t) + (r - vol^2/2)*t)
if ((i % 100) == 0) {
print(S_t)
}
value = value + max(S_t - K, 0)
}
return(value*exp(-r*t)/1000)
}
priceSimulation <- function(S0, K, t, vol, r) {
value = 0
for (i in 1:1000) {
S_t = S0*exp(vol*rnorm(0,t) + (r - vol^2/2)*t)
if ((i %% 100) == 0) {
print(S_t)
}
value = value + max(S_t - K, 0)
}
return(value*exp(-r*t)/1000)
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
priceSimulation <- function(S0, K, t, vol, r) {
value = 0
for (i in 1:1000) {
S_t = S0*exp(vol*rnorm(n=1, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
if ((i %% 100) == 0) {
print(S_t)
}
value = value + max(S_t - K, 0)
}
return(value*exp(-r*t)/1000)
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
print(BS.price)
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t, 0))
return(value*exp(-r*t))
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
print(S_t)
value = mean(pmax(S_t, 0))
return(value*exp(-r*t))
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
print(pmax(S_t, 0))
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t, 0))
print(pmax(S_t, 0))
return(value*exp(-r*t))
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
print(pmax(S_t, 0))
return(value*exp(-r*t))
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
print(pmax(S_t - K, 0))
return(value*exp(-r*t))
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
priceBlackScholes <- function(S0, K, t, vol, r) {
d1 = (log(S0/K) + (r + vol^2/2)*t)/vol*sqrt(t)
d2 = d1 - vol*sqrt(t)
return(S0*pnorm(d1) - K*exp(-r*t)*pnorm(d2))
}
rf = 0.04
vol = 0.34/sqrt(12)
K = 25
S0 = 20
BS.price = priceBlackScholes(S0=S0, K=K, t=6, vol=vol, r=rf)
print(BS.price)
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
return(value*exp(-r*t))
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
priceBlackScholes <- function(S0, K, t, vol, r) {
d1 = (log(S0/K) + (r + vol^2/2)*t)/vol*sqrt(t)
d2 = d1 - vol*sqrt(t)
return(S0*pnorm(d1) - K*exp(-r*t)*pnorm(d2))
}
rf = 0.04
vol = 0.34/sqrt(12)
K = 25
S0 = 20
BS.price = priceBlackScholes(S0=S0, K=K, t=6, vol=vol, r=rf)
print(BS.price)
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
return(value*exp(-r*t))
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol^2*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
return(value*exp(-r*t))
}
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
priceBlackScholes <- function(S0, K, t, vol, r) {
d1 = (log(S0/K) + (r + vol^2/2)*t)/vol*sqrt(t)
d2 = d1 - vol*sqrt(t)
return(S0*pnorm(d1) - K*exp(-r*t)*pnorm(d2))
}
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol^2*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
return(value*exp(-r*t))
}
rf = 0.04
vol = 0.34/sqrt(12)
K = 25
S0 = 20
BS.price = priceBlackScholes(S0=S0, K=K, t=6, vol=vol, r=rf)
print(BS.price)
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0,sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
return(value*exp(-r*t))
}
rf = 0.04
vol = 0.34/sqrt(12)
K = 25
S0 = 20
BS.price = priceBlackScholes(S0=S0, K=K, t=6, vol=vol, r=rf)
print(BS.price)
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
priceBlackScholes <- function(S0, K, t, vol, r) {
d1 = (log(S0/K) + (r + vol^2/2)*t)/(vol*sqrt(t))
d2 = d1 - vol*sqrt(t)
return(S0*pnorm(d1) - K*exp(-r*t)*pnorm(d2))
}
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0, sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
return(value*exp(-r*t))
}
rf = 0.04
vol = 0.34/sqrt(12)
K = 25
S0 = 20
BS.price = priceBlackScholes(S0=S0, K=K, t=6, vol=vol, r=rf)
print(BS.price)
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
# c
priceAntitheticSimulatioin <- function(S0, K, t, vol, r) {
normSample = rnorm(n=1000, mean=0, sd=sqrt(t))
S_t = S0*exp(vol*normSample + (r - vol^2/2)*t)
S_at = S0*exp(vol*-normSample + (r - vol^2/2)*t)
avgValue = (S_t + S_at)/2
value = mean(pmax(avgValue - K, 0))
return(value*exp(-r*t))
}
antitheticSimulation.price = priceAntitheticSimulatioin(S0=S0, K=K, t=6, vol=vol, r=rf)
print(antitheticSimulation.price)
# c
priceAntitheticSimulatioin <- function(S0, K, t, vol, r) {
normSample = rnorm(n=1000, mean=0, sd=sqrt(t))
S_t = S0*exp(vol*normSample + (r - vol^2/2)*t)
S_at = S0*exp(vol*-normSample + (r - vol^2/2)*t)
value = mean((pmax(S_t - K, 0) + pmax(S_at - K, 0))/2)
return(value*exp(-r*t))
}
antitheticSimulation.price = priceAntitheticSimulatioin(S0=S0, K=K, t=6, vol=vol, r=rf)
print(antitheticSimulation.price)
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
priceControlSimulation <- function(S0, K, t, vol, r) {
normSample = rnorm(n=1000, mean=0, sd=sqrt(t))
expPrice = S0*exp(r*t)
S_t = S0*exp(vol*normSample + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0) - S_t + expPrice)
return(value*exp(-r*t))
} # add error of estimate
controlSimulation.price = priceControlSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(controlSimulation.price)
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
# b
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0, sd=sqrt(t)) + (r - vol^2/2)*t)
value = mean(pmax(S_t - K, 0))
return(c(value*exp(-r*t), sd(value)))
} # add error of estimate
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
# b
priceSimulation <- function(S0, K, t, vol, r) {
S_t = S0*exp(vol*rnorm(n=1000, mean=0, sd=sqrt(t)) + (r - vol^2/2)*t)
value = pmax(S_t - K, 0)
return(c(mean(value*exp(-r*t)), sd(value)))
} # add error of estimate
Simulation.price = priceSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(Simulation.price)
# c
priceAntitheticSimulatioin <- function(S0, K, t, vol, r) {
normSample = rnorm(n=1000, mean=0, sd=sqrt(t))
S_t = S0*exp(vol*normSample + (r - vol^2/2)*t)
S_at = S0*exp(vol*-normSample + (r - vol^2/2)*t)
value = (pmax(S_t - K, 0) + pmax(S_at - K, 0))/2
return( c(mean(value*exp(-r*t)), sd(value)) )
} # add error of estimate
antitheticSimulation.price = priceAntitheticSimulatioin(S0=S0, K=K, t=6, vol=vol, r=rf)
print(antitheticSimulation.price)
priceControlSimulation <- function(S0, K, t, vol, r) {
normSample = rnorm(n=1000, mean=0, sd=sqrt(t))
expPrice = S0*exp(r*t)
S_t = S0*exp(vol*normSample + (r - vol^2/2)*t)
value = pmax(S_t - K, 0) - S_t + expPrice
return( c(mean(value*exp(-r*t)), sd(value)) )
} # add error of estimate
controlSimulation.price = priceControlSimulation(S0=S0, K=K, t=6, vol=vol, r=rf)
print(controlSimulation.price)
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
vol = 0.2
t = 0.25
rf = 0.05
S0 = 1.05
# a
priceGSG <- function(S0, t, vol, r) {
alpha = r - vol^2/2
beta = r + vol^2/2
return( S0*(alpha*exp(-r*t)*pnorm(-sqrt(t)*alpha/vol)/r + beta*(1 - pnorm(-sqrt(t)*beta/vol))/r - 1) )
}
GSG.price = priceGSG(S0=S0, t=t, vol=vol, r=rf)
print(GSG.price)
0.25/3/30/24/4
3*30*24*4
# b
priceAsianSimulation <- function(S0, t, vol, r) {
dt = 0.25/3/30/24/4
N = 3*30*24*4
value = 0
for (i in 1:1000) {
normSample = rnorm(n=N, mean=0, sd=sqrt(dt))
path = S0*exp(cumsum(normSample + (r + vol^2/2)*dt))
adjPath = path - path[length(path)]
value = value + max(adjPath)
}
return(value*exp(-r*t)/1000)
}
asianSimulation.price = priceAsianSimulation(S0=S0, t=t, vol=vol, r=rf)
print(asianSimulation.price)
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
source('~/Documents/Academics/2019 Spring/ORF 504/HW 5/HW 5.R')
1.2*(14.7 - 3.2) + 3.2
(60 - 5 - 5 - 1)*(log(2.325) - log(1.848))
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
print(pnorm(0))
print(pnorm(0))
pritn(1/sqrt(2*pi))exp(0)
pritn(1/sqrt(2*pi))*exp(0)
pritn(1/sqrt(2*pi))*exp(0))
print(1/sqrt(2*pi))*exp(0))
print(1/sqrt(2*pi))*exp(0)
print(1/sqrt(2*pi))*exp(0)
print((1/sqrt(2*pi))*exp(0))
print(pnorm(0))
print(dnorm(0))
source('~/Untitled.R')
print(s0*pnorm(d1) - K*exp(-r*T)*pnorm(d2))
(14.7 - 3.2)*1.2 + 3.2
log(0.1*65/30)/(1-0.3)/(0.07+0.01)
source('~/.active-rstudio-document')
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 3.7, 3.7, 3.7, 3.7, 3.7, 3.3)
print(mean(scores))
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 3.7, 3.7, 3.7, 3.7, 3.7, 3.3, 4, 4)
print(mean(scores))
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 4, 3.7, 3.7, 3.7, 3.7, 3.3)
print(mean(scores))
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 4, 4, 3.7, 3.7, 3.7, 3.3)
print(mean(scores))
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 4, 4, 4, 3.7, 3.7, 3.3, 4, 4)
print(mean(scores))
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 4, 4, 4, 4, 3.7, 3.3, 4, 4)
print(mean(scores))
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 4, 4, 4, 3.7, 3.7, 3.3, 4, 4)
print(mean(scores))
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 3.7, 3.7, 3.7, 3.7, 3.7, 3.3, 4, 4)
print(mean(scores))
scores = c(3.7, 3, 3.3, 4, 4, 4, 4, 3.7, 3.7, 3.7, 3.7, 3.7, 3.3)
print(mean(scores))
vol = c(11, 22.5, 36.56, 45)
price = c(453, 454.5, 453.75, 454)
avgPrice = vol * price / sum(vol)
print(avgPrice)
vol = c(11, 22.5, 36.56, 45)
price = c(453, 454.5, 453.75, 454)
avgPrice = sum(vol * price / sum(vol))
print(avgPrice)
vol = c(1, 2.5, 6.56, 5)
price = c(453, 454.5, 453.75, 454)
avgPrice = sum(vol * price / sum(vol))
print(avgPrice)
0.05*0.96
0.9*0.04
0.036 + 0.048
0.036 / 0.084
# remove old package
if('qserver' %in% rownames(installed.packages())) remove.packages('qserver')
# install devtools
if(! 'devtools' %in% rownames(installed.packages())) install.packages('devtools')
library(devtools)
# install rkdb
devtools::install_github('kxsystems/rkdb', quiet=TRUE,INSTALL_opts=c("--no-multiarch"))
library("rkdb", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
db <- open_connection('orf474', 6000)
db <- open_connection('orf474.princeton.edu', 6000)
db <- open_connection('orf474', 6000)
execute(db, 'tables[]')
execute(db, 'select tmin: min time, tmax:max time from trade where date=2017.10.26')
execute(db, h'select tmin: min time, tmax:max time from trade where date=2017.10.26')
execute(db, h"select tmin: min time, tmax:max time from trade where date=2017.10.26")
execute(db, 'h"select tmin: min time, tmax:max time from trade where date=2017.10.26"')
execute(db, `timespan'select tmin: min time, tmax:max time from trade where date=2017.10.26')
execute(db, timespan$'select tmin: min time, tmax:max time from trade where date=2017.10.26')
execute(db, `timespan$'select tmin: min time, tmax:max time from trade where date=2017.10.26')
execute(db, '`timespan$select tmin: min time, tmax:max time from trade where date=2017.10.26')
execute(db, 'select tmin:`timespan$min time, tmax:`timespan$max time from trade where date=2017.10.26')
#     xBar1 = mean(x[2:length(x)]) # X_t
#     xBar2 = mean(x[1:(length(x) - 1)]) # X_{t-1}
#     rhoEst = sum((x[2:length(x)] - xBar1)*(x[1:(length(x) - 1)] - xBar2))/sum((x[1:(length(x) - 1)] - xBar2)^2)
#     return(length(x)*(rhoEst - 1))
#   }
#   else {
#     rhoEst = sum(x[2:length(x)]*x[1:(length(x) - 1)])/sum(x[1:(length(x) - 1)])
#     return(length(x)*(rhoEst - 1))
#   }
# }
library(tseries)
prices = read.csv("prices.csv", header=FALSE)$V1
price.diff = diff(prices)
# print(dfTest(prices, drift=TRUE))
# print(dfTest(prices, drift=FALSE))
x <- cumsum(rnorm(1000)) # no unit-root
example.dftest = adf.test(x)
df.test = adf.test(price.diff)
prices = read.csv("prices.csv", header=FALSE)$V1
setwd("~/Documents/Academics/Senior Thesis/Trading Game Code/Python")
#     xBar1 = mean(x[2:length(x)]) # X_t
#     xBar2 = mean(x[1:(length(x) - 1)]) # X_{t-1}
#     rhoEst = sum((x[2:length(x)] - xBar1)*(x[1:(length(x) - 1)] - xBar2))/sum((x[1:(length(x) - 1)] - xBar2)^2)
#     return(length(x)*(rhoEst - 1))
#   }
#   else {
#     rhoEst = sum(x[2:length(x)]*x[1:(length(x) - 1)])/sum(x[1:(length(x) - 1)])
#     return(length(x)*(rhoEst - 1))
#   }
# }
library(tseries)
prices = read.csv("prices.csv", header=FALSE)$V1
price.diff = diff(prices)
# print(dfTest(prices, drift=TRUE))
# print(dfTest(prices, drift=FALSE))
x <- cumsum(rnorm(1000)) # no unit-root
example.dftest = adf.test(x)
df.test = adf.test(price.diff)
library("timeSeries", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
example.dftest = adf.test(x)
#     xBar1 = mean(x[2:length(x)]) # X_t
#     xBar2 = mean(x[1:(length(x) - 1)]) # X_{t-1}
#     rhoEst = sum((x[2:length(x)] - xBar1)*(x[1:(length(x) - 1)] - xBar2))/sum((x[1:(length(x) - 1)] - xBar2)^2)
#     return(length(x)*(rhoEst - 1))
#   }
#   else {
#     rhoEst = sum(x[2:length(x)]*x[1:(length(x) - 1)])/sum(x[1:(length(x) - 1)])
#     return(length(x)*(rhoEst - 1))
#   }
# }
library(tseries)
install.packages("tseries")
#     xBar1 = mean(x[2:length(x)]) # X_t
#     xBar2 = mean(x[1:(length(x) - 1)]) # X_{t-1}
#     rhoEst = sum((x[2:length(x)] - xBar1)*(x[1:(length(x) - 1)] - xBar2))/sum((x[1:(length(x) - 1)] - xBar2)^2)
#     return(length(x)*(rhoEst - 1))
#   }
#   else {
#     rhoEst = sum(x[2:length(x)]*x[1:(length(x) - 1)])/sum(x[1:(length(x) - 1)])
#     return(length(x)*(rhoEst - 1))
#   }
# }
library(tseries)
prices = read.csv("prices.csv", header=FALSE)$V1
price.diff = diff(prices)
# print(dfTest(prices, drift=TRUE))
# print(dfTest(prices, drift=FALSE))
x <- cumsum(rnorm(1000)) # no unit-root
example.dftest = adf.test(x)
df.test = adf.test(price.diff)
kp.test = kpss.test(price.diff)
pacf(prices, lag.max=30)
# pacf(x) # comparison pacf plot
acf(price.diff, lag.max=30)
acf(x) # comparison acf plot
pacf(price.diff, lag.max=30)
# pacf(x) # comparison pacf plot
acf(price.diff, lag.max=30)
#     xBar1 = mean(x[2:length(x)]) # X_t
#     xBar2 = mean(x[1:(length(x) - 1)]) # X_{t-1}
#     rhoEst = sum((x[2:length(x)] - xBar1)*(x[1:(length(x) - 1)] - xBar2))/sum((x[1:(length(x) - 1)] - xBar2)^2)
#     return(length(x)*(rhoEst - 1))
#   }
#   else {
#     rhoEst = sum(x[2:length(x)]*x[1:(length(x) - 1)])/sum(x[1:(length(x) - 1)])
#     return(length(x)*(rhoEst - 1))
#   }
# }
library(tseries)
prices = read.csv("prices.csv", header=FALSE)$V1
price.diff = diff(prices)
# print(dfTest(prices, drift=TRUE))
# print(dfTest(prices, drift=FALSE))
x <- cumsum(rnorm(1000)) # no unit-root
example.dftest = adf.test(x)
df.test = adf.test(price.diff)
kp.test = kpss.test(price.diff)
pacf(price.diff, lag.max=30)
# pacf(x) # comparison pacf plot
acf(price.diff, lag.max=30)
pacf(price.diff, lag.max=30)
# pacf(x) # comparison pacf plot
acf(price.diff, lag.max=30)
